{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\nconst ShopContextProvider = props => {\n  _s();\n  const [products, setProducts] = useState([]);\n\n  /*const getDefaultCart = () => {\r\n    let cart = {};\r\n    for (let i = 0; i < 300; i++) {\r\n      cart[i] = 0;\r\n    }\r\n    return cart;\r\n  };\r\n    const [cartItems, setCartItems] = useState(getDefaultCart());\r\n    useEffect(() => {\r\n    fetch('http://localhost:4000/allproducts') \r\n          .then((res) => res.json()) \r\n          .then((data) => setProducts(data))\r\n      if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/getcart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {setCartItems(data)});\r\n    }\r\n  }, [])\r\n  \r\n  const getTotalCartAmount = () => {\r\n    let totalAmount = 0;\r\n    for (const item in cartItems) {\r\n      if (cartItems[item] > 0) {\r\n        let itemInfo = products.find((product) => product.id === Number(item));\r\n        totalAmount += cartItems[item] * itemInfo.new_price;\r\n      }\r\n    }\r\n    return totalAmount;\r\n  };\r\n    const getTotalCartItems = () => {\r\n    let totalItem = 0;\r\n    for (const item in cartItems) {\r\n      if (cartItems[item] > 0) {\r\n        totalItem += cartItems[item];;\r\n      }\r\n    }\r\n    return totalItem;\r\n  };\r\n    const addToCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n    if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/addtocart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify({\"itemId\":itemId}),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {console.log(data)});\r\n    }\r\n  };\r\n    const removeFromCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n    if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/removefromcart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify({\"itemId\":itemId}),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {console.log(data)});\r\n    }\r\n  };\r\n    const contextValue = {products, getTotalCartItems, cartItems, addToCart, removeFromCart, getTotalCartAmount };\r\n  return (\r\n    <ShopContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </ShopContext.Provider>\r\n  );*/\n};\n_s(ShopContextProvider, \"gfKM3mMj4W7HxXeDyfpKq64mcIE=\");\n_c = ShopContextProvider;\nexport default ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","ShopContext","ShopContextProvider","props","_s","products","setProducts","_c","$RefreshReg$"],"sources":["C:/Users/jawic/Desktop/SSS/102654_MERN_Ecommerce/MERN_Ecommerce/e-commerce-frontend/src/Context/ShopContext.jsx"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst ShopContextProvider = (props) => {\r\n\r\n  const [products,setProducts] = useState([]);\r\n  \r\n  /*const getDefaultCart = () => {\r\n    let cart = {};\r\n    for (let i = 0; i < 300; i++) {\r\n      cart[i] = 0;\r\n    }\r\n    return cart;\r\n  };\r\n\r\n  const [cartItems, setCartItems] = useState(getDefaultCart());\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:4000/allproducts') \r\n          .then((res) => res.json()) \r\n          .then((data) => setProducts(data))\r\n\r\n    if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/getcart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify(),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {setCartItems(data)});\r\n    }\r\n\r\n}, [])\r\n  \r\n  const getTotalCartAmount = () => {\r\n    let totalAmount = 0;\r\n    for (const item in cartItems) {\r\n      if (cartItems[item] > 0) {\r\n        let itemInfo = products.find((product) => product.id === Number(item));\r\n        totalAmount += cartItems[item] * itemInfo.new_price;\r\n      }\r\n    }\r\n    return totalAmount;\r\n  };\r\n\r\n  const getTotalCartItems = () => {\r\n    let totalItem = 0;\r\n    for (const item in cartItems) {\r\n      if (cartItems[item] > 0) {\r\n        totalItem += cartItems[item];;\r\n      }\r\n    }\r\n    return totalItem;\r\n  };\r\n\r\n  const addToCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n    if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/addtocart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify({\"itemId\":itemId}),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {console.log(data)});\r\n    }\r\n  };\r\n\r\n  const removeFromCart = (itemId) => {\r\n    setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n    if(localStorage.getItem(\"auth-token\"))\r\n    {\r\n      fetch('http://localhost:4000/removefromcart', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept:'application/form-data',\r\n        'auth-token':`${localStorage.getItem(\"auth-token\")}`,\r\n        'Content-Type':'application/json',\r\n      },\r\n      body: JSON.stringify({\"itemId\":itemId}),\r\n    })\r\n      .then((resp) => resp.json())\r\n      .then((data) => {console.log(data)});\r\n    }\r\n  };\r\n\r\n  const contextValue = {products, getTotalCartItems, cartItems, addToCart, removeFromCart, getTotalCartAmount };\r\n  return (\r\n    <ShopContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </ShopContext.Provider>\r\n  );*/\r\n};\r\n\r\nexport default ShopContextProvider;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAEjE,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC,IAAI,CAAC;AAE9C,MAAMI,mBAAmB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAErC,MAAM,CAACC,QAAQ,EAACC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA,CAAC;AAACI,EAAA,CAnGIF,mBAAmB;AAAAK,EAAA,GAAnBL,mBAAmB;AAqGzB,eAAeA,mBAAmB;AAAC,IAAAK,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}